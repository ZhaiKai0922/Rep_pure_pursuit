// Generated by gencpp from file clean_avoidance/CleanAvoidanceGoal.msg
// DO NOT EDIT!


#ifndef CLEAN_AVOIDANCE_MESSAGE_CLEANAVOIDANCEGOAL_H
#define CLEAN_AVOIDANCE_MESSAGE_CLEANAVOIDANCEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clean_avoidance
{
template <class ContainerAllocator>
struct CleanAvoidanceGoal_
{
  typedef CleanAvoidanceGoal_<ContainerAllocator> Type;

  CleanAvoidanceGoal_()
    : goal_x(0.0)
    , goal_y(0.0)  {
    }
  CleanAvoidanceGoal_(const ContainerAllocator& _alloc)
    : goal_x(0.0)
    , goal_y(0.0)  {
  (void)_alloc;
    }



   typedef double _goal_x_type;
  _goal_x_type goal_x;

   typedef double _goal_y_type;
  _goal_y_type goal_y;





  typedef boost::shared_ptr< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CleanAvoidanceGoal_

typedef ::clean_avoidance::CleanAvoidanceGoal_<std::allocator<void> > CleanAvoidanceGoal;

typedef boost::shared_ptr< ::clean_avoidance::CleanAvoidanceGoal > CleanAvoidanceGoalPtr;
typedef boost::shared_ptr< ::clean_avoidance::CleanAvoidanceGoal const> CleanAvoidanceGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator1> & lhs, const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator1> & lhs, const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clean_avoidance

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13b965790a69b58a06825eaf607cdbe7";
  }

  static const char* value(const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13b965790a69b58aULL;
  static const uint64_t static_value2 = 0x06825eaf607cdbe7ULL;
};

template<class ContainerAllocator>
struct DataType< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clean_avoidance/CleanAvoidanceGoal";
  }

  static const char* value(const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"float64 goal_x\n"
"float64 goal_y\n"
;
  }

  static const char* value(const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_x);
      stream.next(m.goal_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CleanAvoidanceGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clean_avoidance::CleanAvoidanceGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_x: ";
    Printer<double>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLEAN_AVOIDANCE_MESSAGE_CLEANAVOIDANCEGOAL_H
